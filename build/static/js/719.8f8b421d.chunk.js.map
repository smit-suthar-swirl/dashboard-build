{"version":3,"file":"static/js/719.8f8b421d.chunk.js","mappings":"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","sources":["components/videomodal/VideoModal.js","components/ask-question-modal/AskQuestionModel.js","components/reports/Report.js","components/upload-video/UploadVideo.js","pages/SSVpage.js"],"sourcesContent":["import React from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\n\r\nconst VideoModal = ({ show, handleClose, data }) => {\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <Modal show={show} className='d-grid modal_video' size='lg' onHide={handleClose}>\r\n\r\n                <Modal.Body>\r\n                    <div className='row m-0 p-0' >\r\n                        <div style={{ maxWidth: \"400px\", margin: \"0\", padding: \"0\" }}>\r\n                            <video className='modal_video' controls width=\"600\" height=\"400\" autoPlay loop>\r\n                                <source src={data.url} type=\"video/mp4\" />\r\n                                Your browser does not support the video tag.\r\n                            </video>\r\n                        </div>\r\n                        {/* <div className='col-6 m-0 '>\r\n                            <div className='p-2 mt-1 m-0 d-flex'>\r\n                                <img alt='productmini' src='https://cdn.shopify.com/s/files/1/0088/4031/4931/files/39_f63c01f8-48d6-41b8-8066-1026f6f98e60.jpg?v=1702991482' className='rounded' style={{ height: \"60px\", width: \"60px\" }} />\r\n                                <div className='ps-2'>\r\n                                    <h6 className='mb-0'>{data.video_title} 1</h6>\r\n                                    <p className='prouct_desc'>Here descc</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className='p-2 mt-1 m-0 d-flex border-top'>\r\n                                <img alt='productmini' src='https://cdn.shopify.com/s/files/1/0088/4031/4931/files/39_f63c01f8-48d6-41b8-8066-1026f6f98e60.jpg?v=1702991482' className='rounded' style={{ height: \"60px\", width: \"60px\" }} />\r\n                                <div className='ps-2'>\r\n                                    <h6 className='mb-0'>{data.video_title} 2</h6>\r\n                                    <p className='prouct_desc'>Here descc</p>\r\n                                </div>\r\n                            </div>\r\n                            <div className='p-2 mt-1 m-0 d-flex border-top'>\r\n                                <img alt='productmini' src='https://cdn.shopify.com/s/files/1/0088/4031/4931/files/39_f63c01f8-48d6-41b8-8066-1026f6f98e60.jpg?v=1702991482' className='rounded' style={{ height: \"60px\", width: \"60px\" }} />\r\n                                <div className='ps-2'>\r\n                                    <h6 className='mb-0'>{data.video_title} 3</h6>\r\n                                    <p className='prouct_desc'>Here descc</p>\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div> */}\r\n                    </div>\r\n                </Modal.Body>\r\n\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default VideoModal;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Modal } from 'react-bootstrap';\r\nimport DataTable from 'react-data-table-component';\r\nimport \"./ask.css\"\r\nimport { BsQuestionCircleFill } from 'react-icons/bs';\r\nimport { format } from 'date-fns';\r\nimport axios from 'axios';\r\nimport { BiExport } from 'react-icons/bi';\r\nimport * as XLSX from 'xlsx';\r\nimport { saveAs } from 'file-saver';\r\nimport { RotatingLines } from 'react-loader-spinner';\r\nconst AskQuestionModel = ({ show, handleClose, data }) => {\r\n    const [askQuestData, setAskQuestData] = useState([])\r\n    const [pending, setPending] = React.useState(false);\r\n    const columns = [\r\n        {\r\n            name: 'Video Title',\r\n            selector: row => data.video_title,\r\n        },\r\n        {\r\n            name: 'Name',\r\n            selector: row => row.name,\r\n        },\r\n        {\r\n            name: 'Date',\r\n            selector: row => data.date,\r\n        },\r\n        {\r\n            name: 'Mobile',\r\n            selector: row => row.mobile,\r\n        },\r\n        {\r\n            name: 'Message',\r\n            selector: row => row.message,\r\n        }\r\n    ];\r\n\r\n    // console.log(`${data.startDate.getFullYear()}-${data.startDate.getMonth()}-${data.startDate.getDate()}`);\r\n    async function fetchAskQuestionsData() {\r\n        setPending(true)\r\n        try {\r\n            let requestBody = new FormData();\r\n            requestBody.append(\"brand_id\", data.brand_id);\r\n            requestBody.append(\"start_date\", format(data.startDate, 'yyyy-MM-dd'));\r\n            requestBody.append(\"end_date\", format(data.endDate, 'yyyy-MM-dd'));\r\n            requestBody.append(\"video_id\", data.video_id);\r\n            const response = await axios.post(\r\n                \"https://bigleap.live/index.php/APIv1/ShortVideoAnalytics/getAskquestion\",\r\n                requestBody\r\n            ).then((res) => {\r\n                setAskQuestData(res.data.data)\r\n                setPending(false)\r\n            }).catch((errr) => {\r\n                console.log(errr);\r\n                setPending(false)\r\n            })\r\n\r\n\r\n\r\n        } catch (error) {\r\n            setPending(false)\r\n            throw error; // Rethrow the error if any occurs\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (show) {\r\n            fetchAskQuestionsData(data.date)\r\n        }\r\n    }, [data.date])\r\n    const downloadExcel = () => {\r\n        const worksheet = XLSX.utils.json_to_sheet(askQuestData);\r\n        const workbook = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');\r\n        const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\r\n        saveAs(new Blob([excelBuffer], { type: 'application/octet-stream' }), 'askQuestData.xlsx');\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n\r\n            <Modal show={show} className='d-grid w-100 askquestion_modal ' size='lg' onHide={handleClose}>\r\n                <Modal.Title className='p-3 pb-0'>Asked Questions <BsQuestionCircleFill style={{ cursor: \"pointer\" }} title='These are raised questions asked by viewers on video or product' /><button className='btn btn-sm btn-outline-dark float-end' onClick={() => downloadExcel()}><span className='mt-3'>Export</span> <BiExport size={25} /></button><hr /></Modal.Title>\r\n                <Modal.Body className='p-3 pt-0'>\r\n                    <DataTable\r\n                        columns={columns}\r\n                        data={askQuestData}\r\n                        progressPending={pending}\r\n                        progressComponent={<div className='p-3 m-4' >\r\n                            <RotatingLines height={30} width={30} strokeColor=\"grey\" />\r\n                        </div>}\r\n\r\n                    />\r\n                </Modal.Body>\r\n\r\n            </Modal>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default AskQuestionModel;\r\n","import React, { useCallback, useEffect, useState } from 'react'\r\nimport DataTable from 'react-data-table-component';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport { DateRangePicker } from 'react-date-range'\r\nimport { FaFileCsv, FaFileExcel, FaFilePdf, FaSearch } from 'react-icons/fa';\r\nimport VideoModal from '../videomodal/VideoModal';\r\nimport * as XLSX from 'xlsx';\r\nimport { saveAs } from 'file-saver';\r\nimport jsPDF from 'jspdf';\r\nimport 'jspdf-autotable'; // Importing jspdf-autotable for table creation\r\nimport axios from 'axios';\r\nimport { useSelector } from 'react-redux';\r\nimport { format } from 'date-fns';\r\nimport AskQuestionModel from '../ask-question-modal/AskQuestionModel';\r\nimport { AiOutlinePlaySquare } from 'react-icons/ai';\r\nimport { RotatingLines, TailSpin } from 'react-loader-spinner';\r\nimport { BiExport } from 'react-icons/bi';\r\n\r\nconst Report = () => {\r\n    const today = new Date();\r\n    const yesterday = new Date(today);\r\n    const [show, setShow] = useState(false);\r\n    const [singleVideoData, setSingleVideoData] = useState([])\r\n    const [askQuestionModelShow, setAskQuestionModelShow] = useState(false)\r\n    const [askquestionData, setAskquestionData] = useState([])\r\n    const [filteredData, setFilteredData] = useState([])\r\n    const [filterText, setFilterText] = useState(\"\")\r\n    const [filtered, setFiltered] = useState(false)\r\n    const handleClose = () => setShow(false);\r\n    const [pending, setPending] = React.useState(false);\r\n    const handleCloseAskQuestion = () => setAskQuestionModelShow(false);\r\n\r\n    const authData = useSelector((state => state.auth.user))\r\n    const [data, setData] = useState([])\r\n    yesterday.setDate(today.getDate() - 1);\r\n    const [state, setState] = useState([\r\n        {\r\n            startDate: new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000),\r\n            endDate: yesterday,\r\n            key: 'selection'\r\n        }\r\n    ]);\r\n\r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n    const toggleDropdown = () => setDropdownOpen(!dropdownOpen);\r\n\r\n    const handleApply = () => {\r\n        // Your apply logic here\r\n        setDropdownOpen(false); // Close the dropdown\r\n    };\r\n    function convertSecondsToTime(seconds) {\r\n        if (isNaN(seconds) || seconds < 0) {\r\n            return \"0\";\r\n        }\r\n\r\n        const hours = Math.floor(seconds / 3600);\r\n        const minutes = Math.floor((seconds % 3600) / 60);\r\n        const remainingSeconds = seconds % 60;\r\n\r\n        if (hours > 0) {\r\n            return `${hours}hr ${minutes}min ${remainingSeconds}sec`;\r\n        } else if (minutes > 0) {\r\n            return `${minutes}min ${remainingSeconds}sec`;\r\n        } else {\r\n            return `${remainingSeconds}sec`;\r\n        }\r\n    }\r\n    const myFun = () => {\r\n        let total = 0\r\n        let wtime = 0\r\n        data && data.map((el) => {\r\n            total += parseInt(el.total_views)\r\n            wtime += parseInt(el.total_watchtime)\r\n\r\n        })\r\n        // console.log(total);\r\n        // console.log(convertSecondsToTime(wtime));\r\n    }\r\n    const columns = [\r\n        {\r\n            // name: 'Sr',\r\n            selector: row => row.index + 1,\r\n            sortable: true,\r\n            width: \"4%\"\r\n        },\r\n        {\r\n            name: 'Video Title',\r\n            selector: row => row.video_title,\r\n            sortable: true,\r\n            width: \"22.2%\",\r\n            cell: (row) => {\r\n                return <>\r\n                    <p className='pt-4' title={row.video_title} style={{ padding: \"2px\", overflow: \"hidden\", whiteSpace: \"nowrap\", textOverflow: \"ellipsis\", cursor: \"pointer\" }} onClick={() => {\r\n                        setSingleVideoData(row)\r\n                        setShow(true)\r\n                    }}>{row.video_title ? row.video_title : \"no title\"} </p>\r\n                    <span onClick={() => {\r\n                        setSingleVideoData(row)\r\n                        setShow(true)\r\n                    }} style={{ cursor: \"pointer\" }}>  <AiOutlinePlaySquare size={20} className='ms-1' /></span>\r\n                </>\r\n            },\r\n\r\n        },\r\n        {\r\n            name: 'Total Views',\r\n            selector: row => row.total_views,\r\n            sortable: true,\r\n            style: {\r\n                backgroundColor: \"rgba(255, 0, 0,.1)\"\r\n            }\r\n        },\r\n        {\r\n            name: `Unique  Views`,\r\n            selector: row => row.total_unique_views,\r\n            sortable: true,\r\n            style: {\r\n                backgroundColor: \"rgba(255, 0, 0,.1)\"\r\n            }\r\n        },\r\n        {\r\n            name: 'Watch Time [Mins]',\r\n            selector: row => row.total_watchtime,\r\n            sortable: true,\r\n            style: {\r\n                backgroundColor: \"rgba(255, 0, 0,.1)\"\r\n            },\r\n            cell: (row) => {\r\n                return (parseInt(row.total_watchtime) / 60).toFixed(2)\r\n            }\r\n        },\r\n        {\r\n            name: 'Avg. Watch Time [Secs]',\r\n            selector: row => Math.round(row.average_watchtime),\r\n            sortable: true,\r\n            style: {\r\n                backgroundColor: \"rgba(255, 0, 0,.1)\"\r\n            },\r\n\r\n        },\r\n        {\r\n            name: 'Engage. Rate %',\r\n            selector: row => row.engagement_rate === null ? `${\"0\" + \"%\"}` : `${Math.round(row.engagement_rate)}%`,\r\n            sortable: true,\r\n            style: {\r\n                backgroundColor: \"rgba(0, 255, 71, .1)\"\r\n            }\r\n        },\r\n        {\r\n            name: 'CTR%',\r\n            selector: row => `${Math.round(row.ctr_rate)}%`,\r\n            sortable: true,\r\n            style: {\r\n                backgroundColor: \"rgba(0, 255, 71, .1)\"\r\n            }\r\n        },\r\n        {\r\n            name: 'Add To Cart',\r\n            selector: row => row.addtoCart,\r\n            sortable: true,\r\n            style: {\r\n                backgroundColor: \"rgba(0, 255, 71, .1)\"\r\n            }\r\n        },\r\n        {\r\n            name: 'Buy Now',\r\n            selector: row => row.buyNow,\r\n            sortable: true,\r\n            style: {\r\n                backgroundColor: \"rgba(0, 255, 71, .1)\"\r\n            }\r\n        },\r\n        {\r\n            name: 'Ask Question',\r\n            selector: row => row.askQuestion,\r\n            sortable: true,\r\n            style: {\r\n                backgroundColor: \"rgba(0, 255, 71, .1)\"\r\n            },\r\n            cell: (row) => {\r\n                return row.askQuestion > 0 ? <p onClick={() => {\r\n                    setAskQuestionModelShow(true)\r\n                    setAskquestionData(row)\r\n                }} style={{ cursor: \"pointer\" }}><span className='badge_ask_count'>{row.askQuestion}</span></p> : <p style={{ padding: \"3px 5px\" }}>{row.askQuestion}</p>\r\n            }\r\n        },\r\n    ]\r\n    // const handleRowClicked = (row) => {\r\n    //     setSingleVideoData(row)\r\n    //     setShow(true)\r\n    // }\r\n    const CustomSortIconComponent = () => {\r\n        return <>\r\n\r\n            <div className='ms-3'>\r\n                <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M13.3333 2.6665V10.6665H15.3333L12.6667 13.9998L10 10.6665H12V2.6665H13.3333ZM8 11.9998V13.3332H2V11.9998H8ZM9.33333 7.33317V8.6665H2V7.33317H9.33333ZM9.33333 2.6665V3.99984H2V2.6665H9.33333Z\" fill=\"#09121F\" />\r\n                </svg>\r\n            </div>\r\n        </>\r\n    };\r\n\r\n    const getData = useCallback(async () => {\r\n        setPending(true)\r\n        try {\r\n            await axios.get(`https://goswirl.world:3001/getAnalyticsDataByBrandIdAndDate?brand_id=${authData?.brand_id}&start_date=${format(state[0].startDate, 'yyyy-MM-dd')}&end_date=${format(state[0].endDate, 'yyyy-MM-dd')}`).then((response) => {\r\n                setData(response.data.resp)\r\n                if (response.data) {\r\n                    setPending(false)\r\n                }\r\n            }).catch((err) => {\r\n                console.log(err);\r\n                setPending(false)\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }, [authData.brand_id, state])\r\n\r\n\r\n    const filterData = (text) => {\r\n        setFilterText(text)\r\n        const res = data.filter(item => item.video_title && item.video_title.toLowerCase().includes(filterText.toLowerCase()));\r\n        setFilteredData(res)\r\n        console.log(data);\r\n    }\r\n    // const downloadExcel = () => {\r\n    //     // Define your custom column headers\r\n    //     const headers = ['Total Unique Views', 'Video Title', 'Brand Id', 'Video Id', 'Total Watch Time', 'Id', 'Url', 'Duration', 'Total Views', 'Date', 'Buy Now', 'Add To Cart', 'Ask Questions', 'Average Watch time', 'Engagement Rate', 'CTR'/* Add more titles as needed */];\r\n\r\n    //     // Function to handle missing keys and set default value\r\n    //     const handleMissingKey = (obj, key, defaultValue = '-') => {\r\n    //         return obj.hasOwnProperty(key) ? obj[key] : defaultValue;\r\n    //     };\r\n\r\n    //     // Convert data to an array of arrays with headers as the first row\r\n    //     const excelData = [headers, ...data.map(item => [\r\n    //         handleMissingKey(item, 'total_unique_views'),\r\n    //         handleMissingKey(item, 'video_title'),\r\n    //         handleMissingKey(item, 'brand_id'), /* Add more fields as needed */\r\n    //         handleMissingKey(item, 'video_id'), /* Add more fields as needed */\r\n    //         handleMissingKey(item, 'total_watchtime'), /* Add more fields as needed */\r\n    //         handleMissingKey(item, 'id'), /* Add more fields as needed */\r\n    //         handleMissingKey(item, 'url'), /* Add more fields as needed */\r\n    //         handleMissingKey(item, 'duration'), /* Add more fields as needed */\r\n    //         handleMissingKey(item, 'total_views'), /* Add more fields as needed */\r\n    //         handleMissingKey(item, 'date'), /* Add more fields as needed */\r\n    //         handleMissingKey(item, 'buyNow'), /* Add more fields as needed */\r\n    //         handleMissingKey(item, 'addtoCart'), /* Add more fields as needed */\r\n    //         handleMissingKey(item, 'askQuestion'), /* Add more fields as needed */\r\n    //         handleMissingKey(item, 'average_watchtime'), /* Add more fields as needed */\r\n    //         handleMissingKey(item, 'engagement_rate'), /* Add more fields as needed */\r\n    //         handleMissingKey(item, 'ctr'), /* Add more fields as needed */\r\n    //     ])];\r\n\r\n    //     // Convert data to worksheet\r\n    //     const worksheet = XLSX.utils.aoa_to_sheet(excelData);\r\n\r\n    //     // Create workbook and append the worksheet\r\n    //     const workbook = XLSX.utils.book_new();\r\n    //     XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');\r\n\r\n    //     // Convert workbook to Excel buffer\r\n    //     const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\r\n\r\n    //     // Trigger download\r\n    //     saveAs(new Blob([excelBuffer], { type: 'application/octet-stream' }), 'data.xlsx');\r\n    // };\r\n\r\n\r\n    const downloadExcel = () => {\r\n        // Define your custom column headers\r\n        const headers = ['Date', 'Video Title', 'Total Views', 'Unique Views', \"Watch Time [Secs]\", 'Avg Watch Time [Secs]', 'Buy Now', 'Add to Cart', 'Ask Question', 'Engagement', 'CTR'   /* Add more titles as needed */];\r\n\r\n        // Function to handle missing keys and set default value\r\n        const handleMissingKey = (obj, key, defaultValue = '-') => {\r\n            return obj.hasOwnProperty(key) ? obj[key] : defaultValue;\r\n        };\r\n\r\n        // Define which fields to export\r\n        const fieldsToExport = ['date', 'video_title', 'total_views', 'total_unique_views', 'total_watchtime', 'average_watchtime', 'buyNow', 'addtoCart', 'askQuestion', 'engagement_rate', 'ctr_rate'];\r\n\r\n        // Convert data to an array of arrays with headers as the first row\r\n        const modifiedData = data.map(item => {\r\n            // Make changes to the 'video_title' key (example: convert to uppercase)\r\n            const modifiedItem = { ...item, total_watchtime: (parseInt(item.total_watchtime) / 60).toFixed(2) };\r\n            return fieldsToExport.map(field => handleMissingKey(modifiedItem, field));\r\n        });\r\n\r\n        const excelData = [headers, ...modifiedData];\r\n\r\n        // Convert data to worksheet\r\n        const worksheet = XLSX.utils.aoa_to_sheet(excelData);\r\n\r\n        // Create workbook and append the worksheet\r\n        const workbook = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, 'Sheet1');\r\n\r\n        // Convert workbook to Excel buffer\r\n        const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\r\n\r\n        // Trigger download\r\n        saveAs(new Blob([excelBuffer], { type: 'application/octet-stream' }), 'data.xlsx');\r\n    };\r\n\r\n\r\n\r\n    const downloadCSV = () => {\r\n        // Define your custom column headers\r\n        const headers = ['Date', 'Video Title', 'Total Views', 'Unique Views', \"Watch Time [Mins]\", 'Avg Watch Time [Secs]', 'Buy Now', 'Add to Cart', 'Ask Question', 'Engagement', 'CTR'   /* Add more titles as needed */];\r\n        const fieldsToExport = ['date', 'video_title', 'total_views', 'total_unique_views', 'total_watchtime', 'average_watchtime', 'buyNow', 'addtoCart', 'askQuestion', 'engagement_rate', 'ctr_rate'];\r\n\r\n        // Function to handle missing keys and set default value\r\n        const handleMissingKey = (obj, key, defaultValue = '-') => {\r\n            return obj.hasOwnProperty(key) ? obj[key] : defaultValue;\r\n        };\r\n\r\n        // Convert data to CSV string\r\n        let csvContent = headers.join(',') + '\\n';\r\n        data.forEach(item => {\r\n            // Modify the 'video_title' key (example: convert to uppercase)\r\n            const modifiedItem = { ...item, total_watchtime: (parseInt(item.total_watchtime) / 60).toFixed(2) };\r\n\r\n            const row = [\r\n                handleMissingKey(modifiedItem, fieldsToExport[0]),\r\n                handleMissingKey(modifiedItem, fieldsToExport[1]),\r\n                handleMissingKey(modifiedItem, fieldsToExport[2]),\r\n                handleMissingKey(modifiedItem, fieldsToExport[3]),\r\n                handleMissingKey(modifiedItem, fieldsToExport[4]),\r\n                handleMissingKey(modifiedItem, fieldsToExport[5]),\r\n                handleMissingKey(modifiedItem, fieldsToExport[6]),\r\n                handleMissingKey(modifiedItem, fieldsToExport[7]),\r\n                handleMissingKey(modifiedItem, fieldsToExport[8]),\r\n                handleMissingKey(modifiedItem, fieldsToExport[9]),\r\n                handleMissingKey(modifiedItem, fieldsToExport[10]),\r\n            ];\r\n            csvContent += row.join(',') + '\\n';\r\n        });\r\n\r\n        // Create Blob from CSV string\r\n        const csvBlob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\r\n\r\n        // Trigger download\r\n        saveAs(csvBlob, 'data.csv');\r\n    };\r\n\r\n\r\n\r\n    const downloadPDF = () => {\r\n        const doc = new jsPDF('l', 'pt', 'a4', true); // Landscape orientation\r\n\r\n        // Define your custom column headers\r\n        const headers = ['Date', 'Video Title', 'Total Views', 'Unique Views', \"Watch Time [Mins]\", 'Avg Watch Time [Secs]', 'Buy Now', 'Add to Cart', 'Ask Question', 'Engagement', 'CTR'   /* Add more titles as needed */];\r\n        const fields = ['date', 'video_title', 'total_views', 'total_unique_views', 'total_watchtime', 'average_watchtime', 'buyNow', 'addtoCart', 'askQuestion', 'engagement_rate', 'ctr_rate'];\r\n\r\n        // Function to handle missing keys and set default value\r\n        const handleMissingKey = (obj, key, defaultValue = '-') => {\r\n            return obj.hasOwnProperty(key) ? obj[key] : defaultValue;\r\n        };\r\n\r\n        // Convert data to an array of arrays with custom column headers\r\n        const tableData = [headers];\r\n        data.forEach(item => {\r\n            // Modify the 'video_title' key (example: convert to uppercase)\r\n            const modifiedItem = { ...item, total_watchtime: (parseInt(item.total_watchtime) / 60).toFixed(2) };\r\n\r\n            const row = fields.map(field => handleMissingKey(modifiedItem, field));\r\n            tableData.push(row);\r\n        });\r\n\r\n        doc.autoTable({\r\n            head: [headers],\r\n            body: tableData.slice(1), // Exclude headers from body data\r\n            headStyles: {\r\n                fillColor: [238, 238, 119],\r\n                textColor: [0, 0, 0]\r\n            },\r\n            styles: { cellPadding: 1, fontSize: 5 },\r\n            columnStyles: { 0: { cellWidth: 'auto' } },\r\n            margin: { top: 20 },\r\n            startY: 20\r\n        });\r\n        doc.save('data.pdf');\r\n    };\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (filterText !== \"\") {\r\n            setFiltered(true)\r\n        } else {\r\n            setFiltered(false)\r\n        }\r\n    }, [filterText])\r\n\r\n    useEffect(() => {\r\n        getData()\r\n        myFun()\r\n    }, [state, getData])\r\n\r\n    return (\r\n        <>\r\n            <div className='d-flex'>\r\n                <div className='ms-auto d-flex align-items-center mb-3' >\r\n                    <div className=\"dropdown d-flex\">\r\n                        <div className=\"input-group input-group me-1\">\r\n                            <span className=\"input-group-text border-end-0 border-dark\" >\r\n                                <FaSearch />\r\n                            </span>\r\n                            <input\r\n                                type=\"search\"\r\n                                className=\"form-control border-start-0 border-dark\"\r\n                                name='search'\r\n                                value={filterText}\r\n                                placeholder='Search video...'\r\n                                onChange={(e) => filterData(e.target.value)}\r\n\r\n\r\n                            // onChange={(e) => handleInputChange(\"mobile\", e.target.value)}\r\n                            />\r\n\r\n                        </div>\r\n\r\n                        {/* <input className='form-control video_search border-dark me-1 text-dark' placeholder='Search video...' type='search' /> */}\r\n                        <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\r\n                            {window.innerWidth > 556 ? <Dropdown.Toggle id=\"dropdown-basic\" className='bg-transparent text-dark border-dark'>\r\n                                <span>\r\n                                    {state[0].endDate !== null ? `${state[0].startDate.toString().slice(4, 15)} to ${state[0].endDate.toString().slice(4, 15)}` : \"Filter by date\"}\r\n                                </span>\r\n                            </Dropdown.Toggle> : <Dropdown.Toggle id=\"dropdown-basic\" className='bg-transparent text-dark border-dark'>\r\n                                <span>\r\n                                    {state[0].endDate !== null ? `${state[0].startDate.getFullYear().toString().slice(2, 4)}/${state[0].startDate.getFullYear().toString().slice(2, 4)}/${state[0].startDate.getFullYear().toString().slice(2, 4)} - ${state[0].startDate.getFullYear().toString().slice(2, 4)}/${state[0].startDate.getFullYear().toString().slice(2, 4)}/${state[0].startDate.getFullYear().toString().slice(2, 4)}` : \"Filter by date\"}\r\n                                </span>\r\n                            </Dropdown.Toggle>}\r\n\r\n\r\n                            <Dropdown.Menu>\r\n                                <DateRangePicker\r\n                                    editableDateInputs={false}\r\n                                    onChange={item => setState([item.selection])}\r\n                                    moveRangeOnFirstSelection={true}\r\n                                    ranges={state}\r\n                                    months={2}\r\n                                    direction='horizontal'\r\n                                    maxDate={yesterday}\r\n                                    minDate={authData?.brand_id == \"236633565\" ? new Date(2024, 2, 15) : new Date(2024, 3, 5)}\r\n                                />\r\n                                <div className='w-100'>\r\n                                    <button id=\"dropdown-basic\" className='btn btn-sm btn-primary float-end me-3' onClick={handleApply}>Done</button>\r\n                                    <button id=\"dropdown-basic\" className='btn btn-sm btn-outline-primary float-end me-3' onClick={() => {\r\n                                        setState([\r\n                                            {\r\n                                                startDate: new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000),\r\n                                                endDate: yesterday,\r\n                                                key: 'selection'\r\n                                            }\r\n                                        ])\r\n                                    }}>Reset</button>\r\n\r\n                                </div>\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                        <Dropdown className='ms-1'>\r\n                            {window.innerWidth > 556 ? <Dropdown.Toggle className='bg-transparent text-dark border-dark'>\r\n                                Export\r\n                            </Dropdown.Toggle> : <Dropdown.Toggle className='bg-transparent text-dark border-dark'>\r\n                                <BiExport />\r\n                            </Dropdown.Toggle>}\r\n\r\n\r\n                            <Dropdown.Menu>\r\n                                <Dropdown.Item onClick={downloadCSV}><FaFileCsv color='gray' /> Export as CSV </Dropdown.Item>\r\n                                <Dropdown.Item onClick={downloadExcel}><FaFileExcel color='green' /> Export as XLS</Dropdown.Item>\r\n                                <Dropdown.Item onClick={downloadPDF}><FaFilePdf color='red' /> Export as PDF</Dropdown.Item>\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </div>\r\n                </div>\r\n            </div >\r\n            <div style={{ width: \"100%\", overflow: \"auto\", height: \"auto\" }}>\r\n                <div style={{ border: \"1px solid #E0E0E0\", minWidth: \"1500px\" }}>\r\n                    <DataTable\r\n                        columns={columns}\r\n                        data={filtered ? filteredData?.map((item, index) => ({ ...item, index })) : data?.map((item, index) => ({ ...item, index }))}\r\n                        subHeader\r\n                        progressPending={pending}\r\n                        pagination\r\n                        progressComponent={<div className='p-3 m-4' >\r\n                            <RotatingLines height={30} width={30} strokeColor=\"grey\" />\r\n                        </div>}\r\n                        sortIcon={<CustomSortIconComponent />}\r\n                        highlightOnHover\r\n                        // sortIconRenderer={() => <CustomSortIconComponent />}\r\n                        // onRowClicked={handleRowClicked}\r\n                        className=\"custom-datatable\"\r\n\r\n                        subHeaderComponent={\r\n                            <>\r\n                                <div className='d-flex w-100 table_header_row' >\r\n                                    <div className='table_blank_column'></div>\r\n                                    <div className='table_higher_column' >\r\n                                        <div className='d-flex text-center'>\r\n                                            <div className='perfomance_column'>Performance</div>\r\n                                            <div className='engagement_column' >Engagement</div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </>}\r\n                    />\r\n\r\n                    {/* code for server side rendering  */}\r\n                    {/* <DataTable\r\ntitle=\"My Data Table\"\r\ncolumns={columns}\r\ndata={data}\r\npagination={true}\r\npaginationServer={true}\r\npaginationTotalRows={data.length} // This should be total rows count from your server\r\nonChangePage={async (page, totalRows) => {\r\n// Fetch data for the new page from the server\r\nsetLoading(true);\r\nconst response = await fetch(`your-api-endpoint?page=${page}&pageSize=${totalRows}`);\r\nconst responseData = await response.json();\r\nsetData(responseData);\r\nsetLoading(false);\r\n}}\r\nprogressPending={loading}\r\n/> */}\r\n                </div>\r\n            </div>\r\n            <VideoModal show={show} handleClose={handleClose} data={singleVideoData} />\r\n            <AskQuestionModel show={askQuestionModelShow} handleClose={handleCloseAskQuestion} data={{ ...askquestionData, ...state[0] }} />\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Report","import React from 'react'\r\n\r\nconst UploadVideo = () => {\r\n    return (\r\n        <div>\r\n            <div className='row'>\r\n                <div className='col-9'>2</div>\r\n                <div className='col-3'>3</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UploadVideo","import React from 'react'\r\nimport \"./table.css\"\r\nimport { Helmet } from \"react-helmet\";\r\nimport Report from '../components/reports/Report';\r\nimport UploadVideo from '../components/upload-video/UploadVideo';\r\n\r\nconst SSVpage = () => {\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <title>SWIRL | Short Videos</title>\r\n            </Helmet>\r\n            <div>\r\n                <div className=\"col\">\r\n                    <div className='d-flex'>\r\n                        <ul className=\"nav nav-tabs\" id=\"responsive-tabs\" role=\"tablist\">\r\n                            {/* <li className=\"nav-item\" role=\"presentation\">\r\n                                <button className=\"nav-link \" id=\"video-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#video\" type=\"button\" role=\"tab\" aria-controls=\"video\" aria-selected=\"true\" disabled>Video gallery </button>\r\n                            </li>\r\n                            <li className=\"nav-item\" role=\"presentation\">\r\n                                <button className=\"nav-link\" id=\"Upload-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#Upload\" type=\"button\" role=\"tab\" aria-controls=\"Upload\" aria-selected=\"false\" disabled>Upload video</button>\r\n                            </li>\r\n                            <li className=\"nav-item\" role=\"presentation\">\r\n                                <button className=\"nav-link\" id=\"playlist-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#playlist\" type=\"button\" role=\"tab\" aria-controls=\"playlist\" aria-selected=\"false\" disabled>Playlist</button>\r\n                            </li> */}\r\n                            <li className=\"nav-item\" role=\"presentation\">\r\n                                <button className=\"nav-link active\" id=\"Reports-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#Reports\" type=\"button\" role=\"tab\" aria-controls=\"Reports\" aria-selected=\"false\">Reports</button>\r\n                            </li>\r\n                            {/* <li className=\"nav-item\" role=\"presentation\">\r\n                                <button className=\"nav-link\" id=\"Settings-tab\" data-bs-toggle=\"tab\" data-bs-target=\"#Settings\" type=\"button\" role=\"tab\" aria-controls=\"Settings\" aria-selected=\"false\" disabled>Settings</button>\r\n                            </li> */}\r\n\r\n                        </ul>\r\n                        <div className='ms-auto d-flex align-items-center' >\r\n                            {/* <div className=\"dropdown\">\r\n\r\n                                <Dropdown show={dropdownOpen} onToggle={toggleDropdown}>\r\n                                    <Dropdown.Toggle id=\"dropdown-basic\" className='bg-transparent text-dark border-dark'>\r\n                                        {state[0].endDate !== null ? `${state[0].startDate.toString().slice(4, 15)} to ${state[0].endDate.toString().slice(4, 15)}` : \"Filter by date\"}\r\n                                    </Dropdown.Toggle>\r\n\r\n                                    <Dropdown.Menu>\r\n                                        <DateRangePicker\r\n                                            editableDateInputs={false}\r\n                                            onChange={item => setState([item.selection])}\r\n                                            moveRangeOnFirstSelection={true}\r\n                                            ranges={state}\r\n                                            months={2}\r\n                                            direction='horizontal'\r\n                                            maxDate={yesterday}\r\n                                        />\r\n                                        <div className='w-100'>\r\n                                            <button id=\"dropdown-basic\" className='btn btn-sm btn-primary float-end me-3' onClick={handleApply}>Done</button>\r\n                                            <button id=\"dropdown-basic\" className='btn btn-sm btn-outline-primary float-end me-3' onClick={() => {\r\n                                                setState([\r\n                                                    {\r\n                                                        startDate: new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000),\r\n                                                        endDate: yesterday,\r\n                                                        key: 'selection'\r\n                                                    }\r\n                                                ])\r\n                                            }}>Reset</button>\r\n\r\n                                        </div>\r\n                                    </Dropdown.Menu>\r\n                                </Dropdown>\r\n                            </div> */}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"tab-content p-3\" id=\"responsive-tabs-content\">\r\n                        <div className=\"tab-pane fade \" id=\"video\" role=\"tabpanel\" aria-labelledby=\"video-tab\">\r\n                            <p>video</p>\r\n                        </div>\r\n                        <div className=\"tab-pane fade\" id=\"Upload\" role=\"tabpanel\" aria-labelledby=\"Upload-tab\">\r\n                            <UploadVideo />\r\n                        </div>\r\n                        <div className=\"tab-pane fade\" id=\"playlist\" role=\"tabpanel\" aria-labelledby=\"playlist-tab\">\r\n                            <p>playlist</p>\r\n                        </div>\r\n                        <div className=\"tab-pane fade show active\" id=\"Reports\" role=\"tabpanel\" aria-labelledby=\"Reports-tab\">\r\n                            <Report />\r\n                        </div>\r\n                        <div className=\"tab-pane fade\" id=\"Settings\" role=\"tabpanel\" aria-labelledby=\"Settings-tab\">\r\n                            <p>Settings</p>\r\n                        </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SSVpage"],"names":["_ref","show","handleClose","data","_jsx","_Fragment","children","Modal","className","size","onHide","Body","style","maxWidth","margin","padding","_jsxs","controls","width","height","autoPlay","loop","src","url","type","askQuestData","setAskQuestData","useState","pending","setPending","React","columns","name","selector","row","video_title","date","mobile","message","useEffect","async","requestBody","FormData","append","brand_id","format","startDate","endDate","video_id","axios","post","then","res","catch","errr","console","log","error","fetchAskQuestionsData","Title","BsQuestionCircleFill","cursor","title","onClick","downloadExcel","worksheet","XLSX","json_to_sheet","workbook","book_new","book_append_sheet","excelBuffer","bookType","saveAs","Blob","BiExport","DataTable","progressPending","progressComponent","RotatingLines","strokeColor","Report","today","Date","yesterday","setShow","singleVideoData","setSingleVideoData","askQuestionModelShow","setAskQuestionModelShow","askquestionData","setAskquestionData","filteredData","setFilteredData","filterText","setFilterText","filtered","setFiltered","authData","useSelector","state","auth","user","setData","setDate","getDate","setState","getTime","key","dropdownOpen","setDropdownOpen","index","sortable","cell","overflow","whiteSpace","textOverflow","AiOutlinePlaySquare","total_views","backgroundColor","total_unique_views","total_watchtime","parseInt","toFixed","Math","round","average_watchtime","engagement_rate","concat","ctr_rate","addtoCart","buyNow","askQuestion","CustomSortIconComponent","viewBox","fill","xmlns","d","getData","useCallback","get","response","resp","err","myFun","total","wtime","map","el","FaSearch","value","placeholder","onChange","e","text","filter","item","toLowerCase","includes","filterData","target","Dropdown","onToggle","toggleDropdown","window","innerWidth","Toggle","id","toString","slice","getFullYear","Menu","DateRangePicker","editableDateInputs","selection","moveRangeOnFirstSelection","ranges","months","direction","maxDate","minDate","handleApply","Item","downloadCSV","fieldsToExport","handleMissingKey","obj","defaultValue","arguments","length","undefined","hasOwnProperty","csvContent","join","forEach","modifiedItem","csvBlob","FaFileCsv","color","excelData","field","aoa_to_sheet","FaFileExcel","downloadPDF","doc","jsPDF","headers","fields","tableData","push","autoTable","head","body","headStyles","fillColor","textColor","styles","cellPadding","fontSize","columnStyles","cellWidth","top","startY","save","FaFilePdf","border","minWidth","subHeader","pagination","sortIcon","highlightOnHover","subHeaderComponent","VideoModal","AskQuestionModel","handleCloseAskQuestion","UploadVideo","SSVpage","Helmet","role"],"sourceRoot":""}